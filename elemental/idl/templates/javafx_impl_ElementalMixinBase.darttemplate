/*
 * Copyright 2012 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package $PACKAGE;
$IMPORTS
import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.core.shared.GwtIncompatible;

import elemental.events.*;
import elemental.util.*;
import elemental.dom.*;
import elemental.html.*;
import elemental.svg.*;
import elemental.javafx.util.FxElementalBase;
import elemental.javafx.util.FxObject;
import elemental.javafx.util.GwtFxBridge;

import netscape.javascript.JSObject;

import java.util.Date;

/**
  * A base class containing all of the IDL interfaces which are shared
  * between disjoint type hierarchies. Because of the GWT compiler
  * SingleJsoImpl restriction that only a single JavaScriptObject
  * may implement a given interface, we hoist all of the explicit
  * mixin classes into a base JSO used by all of elemental.
  */
@GwtIncompatible
public class FxElementalMixinBase $EXTENDS $IMPLEMENTS {
  protected FxElementalMixinBase() {}
  public FxElementalMixinBase(JSObject jso) { super(jso); }
  public static $ID wrap(Object obj) {
    if (obj == null || "undefined".equals(obj)) {
      return null;
    } else if (obj instanceof JSObject) {
      Object autoWrapped = GwtFxBridge.wrapJs(obj);
      if (!(autoWrapped instanceof $ID)) {
        return new $ID((JSObject)obj);
      } else {
        return ($ID)autoWrapped;
      }
    } else if (obj instanceof FxObject) {
      return new $ID(FxObject.unwrap((FxObject)obj));
    }
    throw new ClassCastException("Cannot cast object to FxCounter");
  }
$!MEMBERS

private static class Remover implements EventRemover {
  private final JSObject target;
  private final String type;
  private final JSObject handler;
  private final boolean useCapture;

  private Remover(JSObject target, String type, JSObject handler,
      boolean useCapture) {
    this.target = target;
    this.type = type;
    this.handler = handler;
    this.useCapture = useCapture;
  }

  @Override
  public void remove() {
    target.call("removeEventListener", new Object[] {type, handler, useCapture});
  }
}

public final EventRemover addEventListener(String type, EventListener listener, boolean useCapture) {
  JSObject handler = GwtFxBridge.entryPoint(obj, listener, "handleEvent", Event.class);
  obj.call("addEventListener", new Object[] {type, handler, useCapture});
  return new Remover(obj, type, handler, useCapture);
}

public final EventRemover addEventListener(String type, EventListener listener) {
  return addEventListener(type, listener, false);
}

@Deprecated
public final void removeEventListener(String type, EventListener listener, boolean useCapture) {
  throw new IllegalArgumentException("Use the EventRemover to remove event listeners");
}

@Deprecated
public final void removeEventListener(String type, EventListener listener) {
  throw new IllegalArgumentException("Use the EventRemover to remove event listeners");
}

}
